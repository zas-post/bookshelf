#-------------------------------------------------
#
# Introduction to Github by Alexander Z
#
# Version        Date             Info
#  1.0         30-Jan-2022    Initial Version
#
#-------------------------------------------------


# System, applies to entire machine and all users
git config --system --list
git config --system --edit

# User defined
git config --global --list
git config --global --edit


git config --list
git config --list --show-origin

git config -l 



*** Первоначальная настройка
* Настройка информации о пользователе для всех локальных репозиториев

 git config --global user.name "[name]"           #Устанавливает имя, которое будет отображаться в поле автора у выполняемых вами коммитов

 git config --global user.email "[email]"         #Устанавливает адрес электронной почты, который будет отображаться в информации о выполняемых вами коммит


*** Создание репозитория
* Создание нового репозитория или получение его по существующему URL-адресу

git init [Project name]                 #Создаёт новый локальный репозиторий с заданным именем

git clone [url]                         #Скачивает репозиторий вместе со всей его историей изменений


*** Внесение изменений
* Просмотр изменений и создание коммитов (фиксация изменений)

git status                              #Перечисляет все новые или изменённые файлы, которые нуждаются в фиксации

git diff                                #Показывает различия по внесённым изменениям в ещё не проиндексированных файлах

git add [file]                          #Индексирует указанный файл для последующего коммита

git diff --staged                       #Показывает различия между проиндексированной и последней зафиксированной версиями файлов

git reset [file]                        #Отменяет индексацию указанного файла, при этом сохраняет его содержимое

git commit -m "[description message]"   #Фиксирует проиндексированные изменения и сохраняет их в историю версий


*** Коллективная работа
* Именованные серии коммитов и соединение результатов работы

git branch                      #Список именованных веток коммитов с указанием выбранной ветки

git branch [branch name]        #Создаёт новую ветку

git switch -c [branch name]     #Переключается на выбранную ветку и обновляет рабочую директорию до её состояния

git checkout -b [branch name]   ##Переключается на выбранную ветку и обновляет рабочую директорию до её состояния

git merge [branch name]         #Вносит изменения указанной ветки в текущую ветку

git branch -d [branch name]     #Удаляет выбранную ветку


*** Операции с файлами
* Перемещение и удаление версий файлов репозитория

git rm [file]                       #Удаляет конкретный файл из рабочей директории и индексирует его удаление

git rm --cached [file]              #Убирает конкретный файл из контроля версий, но физически оставляет его на своём месте

git mv [original file] [new name]   #Перемещает и переименовывает указанный файл, сразу индексируя его для последующего коммита


*** Игнорирование некоторых файлов
* Исключение временных и вторичных файлов и директорий

*.log           #Git будет игнорировать файлы и директории, перечисленные в файле .gitignore с помощью wildcard синтаксиса
build/
temp-*


git ls-files --others --ignored --exclude-standard  #Список всех игнорируемых файлов в текущем проекте


*** Сохранение фрагментов
* Сохранение и восстановление незавершённых изменений

git stash                   #Временно сохраняет все незафиксированные изменения отслеживаемых файлов

git stash pop               #Восстанавливает состояние ранее сохранённых версий файлов

git stash list              #Выводит список всех временных сохранений

git stash drop              #Сбрасывает последние временно сохранённыe изменения


*** Просмотр истории
* Просмотр и изучение истории изменений файлов проекта

git log                                     #История коммитов для текущей ветки

git log -1                                  #Покажет первый коммит 

git log -l -p                               #Покажет что было сделано в коммит  (в первом коммите)

git log --follow [file]                     #История изменений конкретного файла, включая его переименование

git diff [first branch]...[second branch]   #Показывает разницу между содержанием коммитов двух веток

git show [commit]                           #Выводит информацию и показывает изменения в выбранном коммите


*** Откат коммитов
* Удаление ошибок и корректировка созданной истории

git reset [commit]                      #Отменяет все коммиты после заданного, оставляя все изменения в рабочей директории

git reset --hard [commit]               #Сбрасывает всю историю вместе с состоянием рабочей директории до указанного коммита.


*** Синхронизация с удалённым репозиторием
* Регистрация удалённого репозитория и обмен изменениями

git fetch [remote repository]           #Скачивает всю историю из удалённого репозитория

git merge [remote repository]/[branch]  #Вносит изменения из ветки удалённого репозитория в текущую ветку локального репозитория

git push [remote repository] [branch]   #Загружает все изменения локальной ветки в удалённый репозиторий

git pull                                #Загружает историю из удалённого репозитория и объединяет её с локальной. pull = fetch + merge
